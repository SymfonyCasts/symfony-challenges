extending_chapter1a:
  question: |
    How can we create a shiny-new Symfony application?
  explanation: |
    Yes! Both work. The recommended way to create a Symfony application is to use
    the `symfony` binary... but it's really just a shortcut to run the
    `composer create-project symfony/skeleton` command. It also initializes a
    Git repository automatically.
  features:
    multiple_choice:
      choices:
        a: |
          `symfony new my_project`
        b: |
          `composer create-symfony skeleton my_project`
        c: |
          `composer create-project symfony/skeleton my_project`
        d: |
          Both A) & C) are correct
      correct: d

extending_chapter2a:
  question: |
    Which of the following is NOT true:
  explanation: |
    It *is* true that the `public/` directory is publicly available:
    the user will be able to directly access (and download) files that live here.
    But it is *not* true that you will put any PHP code here.

    There is *one* PHP file already - `public/index.php` - but you probably
    won't need to ever modify this. All the PHP code that *you* write will
    go in `src/`.
  features:
    multiple_choice:
      choices:
        a: |
          The `config/` directory holds configuration files.
        b: |
          The `src/` directory holds (pretty much) all the PHP code you'll write.
        c: |
          The `public/` directory holds all "public" PHP files that
          you create for different pages.
        d: |
          The `vendor/` directory holds all the 3rd-party library coe.
      correct: c

extending_chapter2b:
  question: |
    What command does NOT start a local web server?
  explanation: |
    *All* of these commands will start a local web server, though using the
    `symfony` binary will start a smarter server with HTTPS support.

    `symfony serve` and `symfony server:start` are identical ways to run the
    same command - you can see *all* of the commands available in the `symfony`
    binary by running: `symfony list`.

    The `-d` flag means: "run as a daemon". This is a great option because you'll
    still have access to your terminal after starting the server.
  features:
    multiple_choice:
      choices:
        a: |
          `php -S 127.0.0.1:8000 -t public/`
        b: |
          `symfony server:start`
        c: |
          `symfony serve -d`
        d: |
          All commands above run a local web server
      correct: d

extending_chapter3a:
  question: |
    What must every controller function return?
  explanation: |
    The *only* rule of a Symfony controller is that it must return a Symfony
    `Response` object. That's nice because, at the end of the day, our only
    job as developers is to return a response to the user. But ultimately,
    Symfony doesn't care if you render a template, generate some JSON or do
    something else in order to create the `Response`.

    Oh, and fun fact: in reality, it's not an *absolute* rule that a controller
    must return a `Response` - there *is* a way around this. It's not important
    now (and maybe not ever), but it *is* possible!
  features:
    multiple_choice:
      choices:
        a: |
          A `string` type or `Stringable` object
        b: |
          An instance of `Symfony\Component\HttpFoundation\Response`
        c: |
          `null`
        d: |
          A template string or a `Response`.
      correct: b

extending_chapter4:
  question: |
    What is the correct way to define wildcards for routes?
  features:
    multiple_choice:
      choices:
        a: |
          `@Route("/user/{username}")`
        b: |
          `@Route("/user/*.")`
        c: |
          `@Route("/user/<username>")`
        d: |
          `@Route("/user/(username)")`
      correct: a

extending_chapter5:
  question: |
    How can you list all the registered routes in your application using the console?
  explanation: |
    Symfony's `bin/console` is very useful!

    > Run `bin/console list debug` to see the list of all commands available that
    > could help you with debugging.
  features:
     multiple_choice:
       choices:
         a: |
           `php bin/console debug:routes`
         b: |
           `php bin/console debug:router`
         c: |
           `php bin/console router:show`
         d: |
           `php bin/console routes:list`
       correct: b

extending_chapter6a:
  question: |
    Symfony Flex is:
  explanation: |
    Correct! Symfony Flex is a tool to help construct Symfony applications, but it's implemented
    as a simple Composer plugin. The *biggest* super power of Flex is its recipe
    system: when you install a package, if that package has a recipe, it will
    configure itself by adding configuration files or making other small changes
    to your app.
  features:
    multiple_choice:
      choices:
        a: A Symfony component
        b: A Composer plugin
        c: A methodology of development for new Symfony projects
      correct: b

extending_chapter6b:
  question: |
    What package corresponds to the `security-check` alias when you run
    `composer require security-check`?
  explanation: |
    If youâ€™re not sure, you can always check https://flex.symfony.com/.
    In there, you can search by package name or tag!
  features:
    multiple_choice:
      choices:
        a: |
          The `sensiolabs/security-checker` package
        b: |
          The `security/check` package
        c: |
          The `symfony/security` package
        d: |
          The `symfony/requirements-checker` package
      correct: a

extending_chapter8a:
  question: |
    By default, Twig templates are stored in `templates/`. Why is this the
    default directory?
  explanation: |
    The only reason that Twig looks for templates in the `templates/` directory
    is because *our* `config/packages/twig.yaml` file has this path in it!

    ```yml
    # config/packages/twig.yaml
    twig:
        default_path: '%kernel.project_dir%/templates'
    ```

    And where did this file come from? It was added by the Twig recipe when
    we installed that package. Want templates to live somewhere else? You have
    full control.
  features:
    multiple_choice:
      choices:
        a: The `templates/` directory is hardcoded as the default path inside TwigBundle.
        b: The `templates/` directory is configured in `config/packages/twig.yaml`.
        c: The `templates/` is specified when you render a template.
        d: Internally, Twig always defaults to first looking for a `templates/` directory before trying other paths.
      correct: b

extending_chapter8b:
  question: |
    What is the correct naming convention for a Twig template that will render HTML?
  explanation: |
    Correct! The reason we use the two extensions after the template name is to remind
    us that this *Twig* file will be processed into something we intend to show
    as *HTML*, for example, in a web page! But otherwise, the file extension
    doesn't really matter.
  features:
    multiple_choice:
      choices:
        a: |
          `layout.html`
        b: |
          `layout.twig`
        c: |
          `layout.html.twig`
        d: |
          `layout.twig.html`
      correct: c

extending_chapter9a:
  question: |
    Suppose we have a basic controller that extends
    `Symfony\Bundle\FrameworkBundle\Controller\AbstractController`. In it, there's an action
    that renders a template:

    ```php
    class PizzaController extends AbstractController
    {
        /**
         * @Route("/pizza/order")
         */
        public function orderPizza()
        {
            return $this->render('pizza/order.html.twig');
        }
    }
    ```

    In this case, what does `$this->render()` return?
  explanation: |
    Remember: a Symfony controller must always return a `Response` object. So,
    even without looking, we can assume that `$this->render()` must also do that.
    And... it does! It renders the template and puts the string into a `Response`
    object for convenience.
  features:
    multiple_choice:
      choices:
        a: |
          The string HTML from the rendered template.
        b: |
          An object of type `Symfony\Component\HttpFoundation\Response`
        c: |
          An instance of `TwigTemplate`
        d: |
          It varies based on the flags passed to `render()`
      correct: b

extending_chapter9b:
  question: |
    Which of these lines is NOT correct Twig syntax?
  explanation: |
    Our attempt to confuse was unsuccessful! The `{* comment *}` syntax is
    *totally* invalid. All the others will work.
  features:
    multiple_choice:
      choices:
        a: |
          `{{ price }}`
        b: |
          `{% set language = 'PHP' %}`
        c: |
          `{* comment *}`
        d: |
          `{# incorrect #}`
      correct: c

extending_chapter9c:
  question: |
    What is the correct Twig syntax to iterate over an array?
  explanation: |
    To iterate over an array in Twig, you need to use the `{% for comment in comments %}` syntax.
    The `index,` part of `{% for index, comment in comments %}` is optional: you
    only need that if you *also* need access to the index.
  features:
    multiple_choice:
      choices:
        a: |
          `{% foreach comments as comment %}`
        b: |
          `{% for comments as comment %}`
        c: |
          `{% for index, comment in comments %}`
        d: |
          `{% for comments => comment %}`
      correct: c

extending_chapter10a:
  question: |
    What will happen if you call the `dump()` PHP function without any arguments?
  explanation: |
    That's right. Calling it without arguments will print all the available variables *only*
    when you call it inside a Twig template! If you call this function in a PHP file,
    it will throw an error:

    > Too few arguments to function `dump()`, 0 passed and exactly 1 expected
  features:
    multiple_choice:
      choices:
        a: |
          An error will be thrown: "At least one argument is required"
        b: |
          It will print all known variables available at the line where it was called
        c: |
          Nothing, this call will be just ignored, i.e. it returns an empty result
        d: |
          System information will be printed
      correct: a

extending_chapter10b:
  question: |
    After running `composer require` to install a Symfony "pack", how many new
    libraries will you have in your app?
  explanation: |
    A "pack" is *just* a shortcut that allows us to `composer require` one library
    but *get* multiple libraries. For example, `composer require profiler` (which
    is an alias to `symfony/profiler-pack`) is a shortcut to
    [install 3 packages](https://github.com/symfony/profiler-pack/blob/f8fddff65d774087e250fd74c36b2fde70db6cfb/composer.json#L8-L10).

    So... there is *almost* nothing special about "packs": they're just packages
    that require other packages for convience. The *one* special thing is this:
    when Flex detects that you're installing a pack, instead of adding
    `symfony/profiler-pack` to your `composer.json` file, it reads the 3
    dependencies of that pack, and adds *those* 3 libraries instead. The end-result
    is the same (you get the 3 packages you want), but now you can manage the
    versions of each package individually.
  features:
    multiple_choice:
      choices:
        a: |
          None: a pack is an "empty" library that exists just to trigger a recipe.
        b: |
          You'll only have 1 new entry in your `composer.json` file, but because
          a pack requires other libraries, it will actually install as many libraries
          as the pack requires.
        c: |
          You'll have one new entry in `composer.json` for each library that the
          pack requires (but you won't have the *actual* pack itself there)
      correct: c

extending_chapter11:
  question: |
    Suppose we are working on a Twig template and we need to add a CSS link to
    a `checkout.css` file that lives at `public/css/`. How would you do that?
  explanation: |
    The `public/` directory is the document root, which means all paths should
    be *relative* to that. Using `/public/css/checkout.css` *would* work, but
    we recommend using the `asset()` function instead. The end-result is the same,
    but it gives you a few subtle advantages:

    - A) The ability to configure a global CDN
    - B) The ability to deploy your site to a sub-directory of a domain
  features:
    multiple_choice:
      choices:
        a: |
          `<link href="{{ asset('css/checkout.css') }}">`
        b: |
          `<link href="{{ css('checkout.css') }}">`
        c: |
          `<link href="/public/css/checkout.css">`
        d: |
          `<link href="/css/checkout.css">`
      correct: a

extending_chapter12:
  question: |
    Let's say I'm creating a route in my controller that needs to be called `app_user_profile` so
    that I can build links to it in a Twig template. What is the correct annotation syntax to do it?
  features:
    multiple_choice:
      choices:
        a: |
          `@Route("/user/profile", "app_user_profile")`
        b: |
          `@Route("/user/profile", name:app_user_profile)`
        c: |
          `@Route("/user/profile", name="app_user_profile")`
        d: |
          `@Route("/user/profile", name=app_user_profile)`
      correct: c

extending_chapter13:
  question: |
    Suppose I have a simple controller that extends
    `Symfony\Bundle\FrameworkBundle\Controller\AbstractController`.
    This time, in one of its actions, I want to return a JSON response
    instead of HTML. What would the return statement look like?
  explanation: |
    A JSON response is... really no different than returning an HTML response,
    except that your content is JSON and you'll also want to set the
    `Content-Type` response header to `application/json`.

    The `JsonResponse` class *extends* the normal `Response` class and makes it
    easy to set JSON content and the `Content-Type` header. The `$this->json()`
    method is just a shortcut to create that same object.

    Why doesn't `return json_encode()` work? Because your controller must always
    return a `Response` object!
  features:
    multiple_choice:
      choices:
        a: |
          `return $this->json([/* â€¦ */])`
        b: |
          `return new JsonResponse([/* â€¦ */])`
        c: |
          `return json_encode([/* â€¦ */])`
        d: |
          Both A) & B) are correct
      correct: d

extending_chapter14:
  question: |
    Suppose I have a Twig block in a template that has some content in it:

    ```twig
    {% block myBlock %}
        Some content here!
    {% endblock %}
    ```

    I now want to *extend* this block inside a child template but without it
    *removing* the parent block's content. How can I do that?
  explanation: |
    That's right! Adding `{{ parent() }}` inside a block in the child template
    will print its parent's content so that it doesn't get replaced!
  features:
    multiple_choice:
      choices:
        a: |
          `{{ block('parent') }}`
        b: |
          `{{ append() }}`
        c: |
          `{{ parent() }}`
        d: |
          `{% parent() %}`
      correct: c

extending_chapter15a:
  question: |
    What is the correct way make the route `@Route("/api/articles/{id}")`
    API endpoint only accessible to GET requests?
  features:
    multiple_choice:
      choices:
        a: |
          `@Route("/api/articles/{id}", method="GET")`
        b: |
          `@Route("/api/articles/{id}", methods="GET")`
        c: |
          `@Route("/api/articles/{id}", methods=["GET"])`
        d: |
          `@Route("/api/articles/{id}", "GET")`
      correct: b

extending_chapter16:
  question: |
    What type-hint do you need to use to inject a Twig service into your controller
    using autowiring?
  explanation: |
    That's right! `\Twig\Environment` is the correct service name for getting the Twig instance
    to render templates. You can find this - and a whole list of type-hints that
    you can use - by running `php bin/console debug:autowiring`.
  features:
    multiple_choice:
      choices:
        a: |
          `public function myEndpoint(\Twig\Environment $twig)`
        b: |
          `public function myEndpoint(\Twig\Template $twig)`
        c: |
          `public function myEndpoint(\Twig\Twig $twig)`
        d: |
          `public function myEndpoint(\Twig\Renderer $twig)`
      correct: a

extending_chapter18:
  question: |
    How can you *execute* Encore in "watch" mode?
  explanation: |
    `yarn watch` is just a shortcut for running `yarn run encore dev --watch`. You can see it defined
    in your `package.json`.

    And `yarn run encore` is just a shortcut for using Node.js to execute `encore` binary
    that lives at `node_modules/.bin/`.
  features:
    multiple_choice:
      choices:
        a: |
          `yarn watch`
        b: |
          `node node_modules/.bin/encore dev --watch`
        c: |
          `yarn run encore dev --watch`
        d: |
          All of these work!
      correct: d
